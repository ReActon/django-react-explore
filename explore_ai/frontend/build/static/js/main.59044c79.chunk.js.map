{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","set_api_data","set_toggle_graph","in_str","set_in_str","label_statement","set_label_statement","st_country_codes","set_st_country_codes","st_country_probs","set_st_country_probs","ConvertCountryCodes","arr_codes","lookup","require","arr_names","forEach","element","push","byIso","country","className","value","onInput","e","target","onClick","in_s","country_codes","country_probdata","temp_prob","temp_country","axios","get","then","res","data","country_ids","country_probs","rounded_temp","Math","round","error","fetch_api_data","labels","datasets","label","backgroundColor","hoverOffset","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAwJeA,EAlJH,WAGV,MAAiCC,mBAAS,IAA1C,mBAAiBC,GAAjB,WACA,EAAyCD,oBAAS,GAAlD,mBAAqBE,GAArB,WACA,EAAqCF,mBAAS,IAA9C,mBACA,GADA,UAC6BA,mBAAS,KAAtC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA+CJ,mBAAS,iDAAxD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAiDN,mBAAS,IAA1D,mBAAOO,EAAP,KAAyBC,EAAzB,KACA,EAAiDR,mBAAS,IAA1D,mBAAOS,EAAP,KAAyBC,EAAzB,KA8EMC,EAAsB,SAACC,GAE3B,IAAMC,EAASC,EAAQ,IACjBC,EAAY,GAOlB,OAJAH,EAAUI,SAAQ,SAAAC,GAChBF,EAAUG,KAAKL,EAAOM,MAAMF,GAASG,YAGhCL,GAKT,OACE,sBAAKM,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,eAAd,qDAGF,uBAAMA,UAAU,YAAhB,UACE,uBAAOA,UAAU,WAAjB,8BACA,uBAAOA,UAAU,WAAWC,MAAOnB,EAAQoB,QAAS,SAAAC,GAAC,OAAIpB,EAAWoB,EAAEC,OAAOH,UAC7E,wBAAQD,UAAU,UAAUK,QAAS,YAnGpB,SAACC,GAGtB,IAAIC,EAAgB,GAChBC,EAAmB,GACnBC,EAAY,EACZC,EAAe,GAEnBC,IACGC,IADH,oCACoCN,IACjCO,MAAK,SAAAC,GAEJlC,EAAakC,EAAIC,MAGjBR,EAAgBO,EAAIC,KAAKC,YACzBR,EAAmBM,EAAIC,KAAKE,cAG5B,IAAMzB,EAASC,EAAQ,IAGvBiB,EAAelB,EAAOM,MAAMS,EAAc,IAAIR,QAC9CU,EAAkC,IAAtBD,EAAiB,GAG7B,IAAMU,EAAeC,KAAKC,MAAkB,GAAZX,GAAkB,GAMlDxB,EAHgB,4BAA8ByB,EAAe,0BAA4BQ,EAAe,KAIxG/B,EAAqBoB,GACrBlB,EAAqBmB,MAEpB,SAACa,GAMFpC,EAHgB,2CA4D4BqC,CAAexC,GAASD,GAAiB,IAArF,kCAGF,qBAAKmB,UAAU,YAAf,SACA,cAAC,IAAD,CACIe,KAAM,CAEJQ,OAAOjC,EAAoBJ,GAC3BsC,SAAS,CAAC,CACRC,MAAO,sBACPV,KAAK3B,EACLsC,gBAAiB,CACf,oBACA,oBACA,qBAGFC,YAAY,KAIhBC,MAAO,UAIX,qBAAK5B,UAAU,UAAf,SACE,uBAAOA,UAAU,gBAAjB,SAAkChB,UCnI3B6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.59044c79.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nimport axios from 'axios';\nimport {Pie} from 'react-chartjs-2'\nimport Chart from 'chart.js/auto';\n\nconst App = () => {\n\n  // declare state variables\n  const [api_data, set_api_data] = useState({});\n  const [toggle_graph, set_toggle_graph] = useState(false);\n  const [chart_data, set_chart_data] = useState({});\n  const [in_str, set_in_str] = useState(\"\");\n  const [label_statement, set_label_statement] = useState(\"Enter a Name to Determine Your Nationality...\");\n  const [st_country_codes, set_st_country_codes] = useState([]);\n  const [st_country_probs, set_st_country_probs] = useState([]);\n\n  // fetch the api       \n  const fetch_api_data = (in_s) => {\n\n    // temporary vars\n    var country_codes = []\n    var country_probdata = []\n    var temp_prob = 0.0\n    var temp_country = \"\"\n\n    axios\n      .get(`http://127.0.0.1:8000/api/${in_s}`)\n      .then(res => {\n        // set the api data state var\n        set_api_data(res.data);        \n\n        // set the locals vars from the result of the api call\n        country_codes = res.data.country_ids;\n        country_probdata = res.data.country_probs;\n\n        // include the requirement for the country-code-lookup\n        const lookup = require('country-code-lookup')\n\n        // set the likeliest country and its probability\n        temp_country = lookup.byIso(country_codes[0]).country;\n        temp_prob = country_probdata[0] * 100;\n\n        // round off the probability\n        const rounded_temp = Math.round(temp_prob * 10) / 10;\n\n        // build the label to be displayed\n        const results = \"You are most likely from \" + temp_country + \" with a probability of \" + rounded_temp + \"%\";\n\n        // set the various state vars\n        set_label_statement(results);\n        set_st_country_codes(country_codes);\n        set_st_country_probs(country_probdata);\n\n      }, (error) => {{\n        // if error code 500, db lookup failed\n        // build the new label\n        const results = \"Sorry, Your Name Could Not Be Found.\";\n\n        // set the label\n        set_label_statement(results);\n      }});\n\n  }\n\n  const ChartComp = (props) => {\n    // let arr_ids = props.ids;\n    // let arr_probs = props.probs;\n    \n    return (\n        <div>\n            <Pie \n              data={{\n                labels:ConvertCountryCodes(st_country_codes),\n                datasets:[{\n                  label: 'Country Nationality',\n                  data:st_country_probs,\n                  backgroundColor: [\n                    'rgb(255, 99, 132)',\n                    'rgb(54, 162, 235)',\n                    'rgb(255, 205, 86)'\n                  ],\n                  hoverOffset:4,\n                }]\n\n              }}\n              width={\"30%\"}\n          \n        />\n        </div>\n    )\n  }\n\n  const ConvertCountryCodes = (arr_codes) => {\n\n    const lookup = require('country-code-lookup')\n    const arr_names = []\n\n    // convert each country code and push results to new array\n    arr_codes.forEach(element => {\n      arr_names.push(lookup.byIso(element).country)\n    });\n\n    return arr_names;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h2 className=\"header_title\">Find Your Nationality From Your Name?</h2>\n      </div>\n     \n      <span className=\"main_span\">\n        <label className=\"name_lbl\">Enter your name:</label>\n        <input className=\"in_field\" value={in_str} onInput={e => set_in_str(e.target.value)}/>\n        <button className=\"btn_nat\" onClick={() => {fetch_api_data(in_str); set_toggle_graph(true)}}>Check Nationality</button>\n      </span>\n\n      <div className=\"pie_chart\">\n      <Pie \n          data={{\n            // convert each code to its corresponding country for labels\n            labels:ConvertCountryCodes(st_country_codes),\n            datasets:[{\n              label: 'Country Nationality',\n              data:st_country_probs,\n              backgroundColor: [\n                'rgb(255, 99, 132)',\n                'rgb(54, 162, 235)',\n                'rgb(255, 205, 86)'\n              ],\n              // add animation element\n              hoverOffset:4,\n            }]\n\n          }}\n          width={\"30%\"}\n          \n        />\n      </div>\n      <div className=\"lbl_div\">\n        <label className=\"lbl_statement\">{label_statement}</label>\n      </div>\n     \n      \n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}